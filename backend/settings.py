"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 3.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "qbpdprgh$ryb(qynh@^d-a41l4pwmyhqmxnl(otz53ojx_(ya_"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    "newapi.mysimulator.ru",
    "127.0.0.1",
    "localhost",
    "devapi.2.mysimulator.ru",
    "api.university.skillslab.center",
    "skswcs8g0c0w8884w80g04s4.109.73.193.124.sslip.io",
]
HOST_URL = "https://api.university.skillslab.center"


# Application definition

INSTALLED_APPS = [
    "rest_framework",
    "django_cron",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "user_profile.apps.UserProfileConfig",
    "drf_yasg",
    "knox",
    "certificates",
    "simulator_groups",
    "lessons",
    "comment_requests",
    "places",
    "notifications",
    "pages",
    "statistics",
    "characters",
    "theories",
    "payments",
    "simulators",
    "emails",
    "external_api",
    "products",
    "tags",
    "subscriptions",
    "banners",
    "recommendations",
    "cron",
    "teachers",
    "club",
    "bot",
    "notebook",
    "decoding",
    "test",
    "django_summernote",
    "poll",
    "course",
    "sortedm2m",
    "company",
    "ext_course",
    "feedback",
    "csvexport",
    "decomposition",
    "modelclone",
]

CRON_CLASSES = [
    "cron.views.CronJobsSubscriptions",
    "cron.views.CronJobsGames",
    "cron.views.CronJobsTG",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "backend.middleware.GetSimulator",
]
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024
ROOT_URLCONF = "backend.urls"
CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]


CORS_ALLOW_HEADERS = [
    "accept",
    "Content-Type",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
    "crossDomain",
    "Access-Control-Allow-Origin",
    "Access-Control-Allow-Headers",
    "Access-Control-Allow-Credentials",
    "X-App-Name",
]

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]
AI_ENDPOINT_URL = "https://ml.skillslab.center/api/1/request/init/"
AI_TEST_ENDPOINT_URL = "https://ml.skillslab.center/api/1/training_step/init/"

WSGI_APPLICATION = "backend.wsgi.application"
AUTH_USER_MODEL = "user_profile.User"

REST_FRAMEWORK = {
    "EXCEPTION_HANDLER": "backend.application_exception_handler.application_exception_handler",
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "backend.application_authentication.ApplicationAuthentication",
    ),
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
    ],
    "DEFAULT_PAGINATION_CLASS": "backend.application_pagination.ApplicationPagination",
    "PAGE_SIZE": 15,
}
LOCALE_PATHS = [os.path.join(BASE_DIR, "backend", "locale")]

DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": os.environ.get("POSTGRES_DB", "saas-api"),
        "USER": os.environ.get("POSTGRES_USER", "saas-api"),
        "PASSWORD": os.environ.get("POSTGRES_PASSWORD", "saas-api"),
        "HOST": os.environ.get("DATABASE_HOST", "127.0.0.1"),
        "PORT": int(os.environ.get("DATABASE_PORT", 5432)),
    }
}
REST_KNOX = {
    "AUTO_REFRESH": True,
    "MIN_REFRESH_INTERVAL": 600,
}
DATA_UPLOAD_MAX_NUMBER_FIELDS = 10240
SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "KNOX Token": {"type": "apiKey", "name": "Authorization", "in": "header"}
    },
    "USE_SESSION_AUTH": False,
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    # 'guardian.backends.ObjectPermissionBackend'
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "ru"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = "/static/"

STATIC_ROOT = os.path.join(BASE_DIR, "static")

# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, "static")
# ]


MEDIA_URL = "/media/"

MEDIA_ROOT = os.path.join(BASE_DIR, "static/media")
